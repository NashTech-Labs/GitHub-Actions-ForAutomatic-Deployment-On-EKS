# **What it does**: Build docker image and push it to Elastic Container Registry on Dev
# **Why we have it**: Sample-app needs to be build as an image and store at remote private registry
# **Who does it impact**: Sample-app on Dev.
# **Author: Saumya Bhushan

name: Build and Deploy sample-app On Dev
on:
  push:
    branches:
      - develop

jobs:
  build-sample-app-on-develop:
    env:
      EKS_CLUSTER: eks-dev
    name: push image to sample-registry (ECR)
    #if: github.event.pull_request.merged == true
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Setup JDK 11
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache SBT
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
          key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      #  Generate Commit Id
      - name: Generate Commit Id
        id: hash-id
        run: echo "::set-output name=git_hash::$(git rev-parse --short "$GITHUB_SHA")"

      # Build the Docker image
      - name: Package and Build Backend
        run: |
          echo "Building image..."
          sbt docker:publishLocal
      # Tag, and push image to Amazon ECR
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: sample-app
          IMAGE_TAG: ${{ steps.hash-id.outputs.git_hash }}
        run: |
          echo "Pushing image to ECR..."
          docker tag sample-service:1.0 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    outputs:
      output-id: ${{ steps.hash-id.outputs.git_hash }}

  deploy-on-eks-develop:
    needs: build-sample-app-on-develop
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: deploy to cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_DEV }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: sample-app
          IMAGE_TAG: ${{needs.build-esample-app-on-develop.outputs.output-id}}
          KUBECTL_VERSION: "v1.23.0"
        with:
          args: set image deployment/$ECR_REPOSITORY $ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -n sample-app-namespace

      - name: verify deployment
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_DEV }}
          KUBECTL_VERSION: "v1.23.0"
        with:
          args: rollout status deployment/sample-app -n sample-app-namespace